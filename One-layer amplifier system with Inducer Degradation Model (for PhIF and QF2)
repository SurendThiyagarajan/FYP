"""
Created on Tue Mar 26 21:07:13 2024

@author: Surend
"""

import matplotlib.pyplot as plt
import pandas as pd
import numpy as np

from scipy.integrate import odeint
from scipy.optimize import differential_evolution

plt.close('all')

plt.rcdefaults()
plt.rcParams['font.family'] = 'Arial'
plt.rcParams['font.weight'] = 'normal' #'bold'
plt.rcParams['font.size'] = 15 
plt.rcParams['axes.labelsize'] = 15
plt.rcParams['axes.labelweight'] = 'normal' #'bold'
plt.rcParams['axes.linewidth'] = 1
plt.rcParams['axes.formatter.limits'] = (-2, 3)
plt.rcParams['figure.subplot.bottom'] = 0.17
plt.rcParams['figure.subplot.left'] = 0.12
plt.rcParams['legend.frameon'] = False
plt.rcParams['legend.fontsize'] = 10 
plt.rcParams["legend.handletextpad"] = 0.3
plt.rcParams["legend.columnspacing"] = 0.5
plt.rcParams["legend.borderaxespad"] = 0
plt.rcParams.update({'axes.spines.top': False, 'axes.spines.right': False}) 
plt.rcParams['lines.markersize'] = 5

def ind_model(y, t, params, ind):
    Ind, mRNA, mRNA_1, protein, protein_1 = y[:]
    v, synM_1, Kind_1, synP_1, degP_1, n_1 = params[:]
    degind = 0.399842
    Ki = 1.91812
    ni = 4.99499
    synM = 6816.25
    Kind = 840.529
    synP = 72.9331
    degP = 0.0800913
    n = 0.590304
    degM = 8.317
    dInd = -degind * ((Ind**ni)/((Ind**ni)+(Ki**ni)))
    dmRNA = synM*((Ind**n)/((Ind**n)+(Kind**n))) - degM*mRNA
    dprotein = synP*mRNA - degP*protein
    dmRNA_1 = v + (synM_1*((protein**n_1)/((protein**n_1)+(Kind_1**n_1)))) - degM*mRNA_1
    dprotein_1 = synP_1*mRNA_1 - degP_1*protein_1
    
    dydt = [dInd, dmRNA, dmRNA_1, dprotein, dprotein_1]
    
    return dydt

def computeSSE(x):
    protein_m = np.zeros((len(tspan), len(ind)))
    
    for i, _ in enumerate(ind):
        y0 = [ind[i], 0, 30, 0, 1902.037] #Change accordingly for PhIF and QF2
        # y0 = [ind[i], 0, 10, 0, 10116] (for QF2)
        sol = odeint(ind_model, y0, tspan, args=(x, ind[i]))
        protein_m[:,i] = sol[:,4]
    
    sse = 0
    for i, _ in enumerate(ind):
        sse = sse + np.sum((Fluo_timedata[:,i+1]-protein_m[:,i])**2)
        
    print(sse)
    
    return sse

def pred_data(x):
    protein_m = np.zeros((len(tspan), len(ind)))
    
    for i, _ in enumerate(ind):
        y0 = [ind[i], 0, 30, 0, 1902.037] #Change accordingly for PhIF and QF2
        # y0 = [ind[i], 0, 10, 0, 10116] (for QF2)
        sol = odeint(ind_model, y0, tspan, args=(x, ind[i]))
        protein_m[:,i] = sol[:,4]
        
    return protein_m
    
def relative_squared_error(true, pred):
    true_mean = np.mean(true)
    squared_error_num = np.sum(np.square(true - pred))
    squared_error_den = np.sum(np.square(true - true_mean))
    rse_loss = squared_error_num / squared_error_den
    print(rse_loss, "RSE")
    return rse_loss

if __name__ == "__main__":
    
    # Change Data according one-layer amplifier system
    Data = pd.read_csv('Round 18_PhIF_Data.csv')
    # Data = pd.read_csv('Round 18_Qsystem_Data.csv')
    Fluo_timedata = Data.iloc[:, 0:4].to_numpy()
    true_val = Data.iloc[:, 1:4].to_numpy()
    ind = [0, 1, 10]
    tspan = np.linspace(0, 24, 25)
    response_x = np.log10(ind)
    response_y = Data.iloc[24, 1:4].to_numpy()
    
    # v, synM_1, Kind_1, synP_1, degP_1, n_1
    bounds = [(100, 10000), (0.1, 5000), (0.1, 50000), (0.1, 10000), (0.1, 50), (1, 5)]
    result_global = differential_evolution(computeSSE, bounds)
    param = result_global.x[:]
    
    print(param)
    
    SSE = computeSSE(param)
    RSE = relative_squared_error(true_val, pred_data(param))
    
    print(SSE, "SSE")
    
    def draw_graph(inducer):
        Header = inducer
        plt.figure(figsize=(6,4))
        plt.plot(Fluo_timedata[:,0], Fluo_timedata[:,1:], '.')
        plt.legend(Header)
        
        plt.figure(figsize=(6,4))
        plt.plot(response_x, response_y, '.')
        plt.xlabel('log(inducer concentration)')
        plt.ylabel('protein (au)')
        
        mRNA_ = np.zeros((len(tspan), len(inducer)))
        protein_ = np.zeros((len(tspan), len(inducer)))
        Ind_ = np.zeros((len(tspan), len(inducer)))  

        for i, _ in enumerate(inducer):
            y0 = [inducer[i], 0, 30, 0, 1902.037] #Change accordingly for PhIF and QF2
            # y0 = [inducer[i], 0, 10, 0, 10116] (for QF2)
            sol = odeint(ind_model, y0, tspan, args=(param, inducer[i]))
            Ind_[:, i] = sol[:, 0]  
            mRNA_[:, i] = sol[:, 2]
            protein_[:, i] = sol[:, 4]

        plt.figure(figsize=(12, 4))
        plt.subplots_adjust(hspace=0.4, wspace=0.3)
        axes2 = [plt.subplot(1, 3, i) for i in range(1, 4)]  
        for i, a in enumerate(axes2):
            a.set_xlabel('Time (hr)')

            if i == 0:
                a.plot(tspan, Ind_)
                a.set_ylabel('Inducer concentration')
            elif i == 1:
                a.plot(tspan, mRNA_)
                a.set_ylabel('mRNA (au)')
            elif i == 2:
                a.plot(Fluo_timedata[:,0], Fluo_timedata[:,1:], '.')
                a.set_prop_cycle(None)
                a.plot(tspan, protein_)
                a.set_ylabel('protein (au)')

            a.legend(Header)

        plt.tight_layout()

        plt.show()
    draw_graph(ind)
